<?php

declare(strict_types=1);

namespace Dokky;

class ComponentsRegistry
{
    private const string NO_GROUP_DEFINED = '67dd70e96b6db';
    private const string REF_PREFIX = '#/components/schemas/';

    /**
     * @var array<class-string, array<string, string>>
     */
    private array $schemaNamesByClassNameAndGroup = [];

    /**
     * @var array<string, string>
     */
    private array $existingSchemas = [];

    /**
     * Groups hash to array of group names.
     *
     * @var array<string, string[]|null>
     */
    private array $groupsMap = [
        self::NO_GROUP_DEFINED => null,
    ];

    /**
     * @var array<class-string, true>
     */
    private array $uniqueClassNames = [];

    /**
     * @var array<string, array{className: class-string, groupHash: string, groups: string[]|null}>
     */
    private array $namedSchemaConfiguration = [];

    /**
     * @param class-string  $className
     * @param array<string> $groups
     */
    public function getSchemaReference(string $className, ?array $groups = null): string
    {
        $groupHash = $this->groupHash($groups);

        if (!isset($this->schemaNamesByClassNameAndGroup[$className][$groupHash])) {
            $schemaName = ReflectionUtil::reflectionClass($className)->getShortName();

            if (isset($this->existingSchemas[$schemaName])) {
                $suffix = 2;

                while (isset($this->existingSchemas[$schemaName.$suffix])) {
                    ++$suffix;
                }

                $schemaName .= $suffix;
            }

            $this->schemaNamesByClassNameAndGroup[$className][$groupHash] = $schemaName;
            $this->existingSchemas[$schemaName] = self::REF_PREFIX.$schemaName;
            $this->uniqueClassNames[$className] = true;
        }

        return self::REF_PREFIX.$this->schemaNamesByClassNameAndGroup[$className][$groupHash];
    }

    /**
     * @param class-string       $className
     * @param array<string>|null $groups
     */
    public function getNamedSchemaReference(
        string $className,
        string $schemaName,
        ?array $groups = null,
    ): string {
        $groupHash = $this->groupHash($groups);

        if (isset($this->namedSchemaConfiguration[$schemaName])) {
            if (
                $this->namedSchemaConfiguration[$schemaName]['className'] !== $className
                || $this->namedSchemaConfiguration[$schemaName]['groupHash'] !== $groupHash
            ) {
                throw new DokkyException(sprintf(
                    'The schema name "%s" is already used for class "%s" with groups "%s"',
                    $schemaName,
                    $this->namedSchemaConfiguration[$schemaName]['className'],
                    implode(',', $this->namedSchemaConfiguration[$schemaName]['groups'] ?? []),
                ));
            }

            return self::REF_PREFIX.$schemaName;
        }

        if (isset($this->existingSchemas[$schemaName])) {
            throw new DokkyException(sprintf(
                'The schema name "%s" is already used for autogenerated schemes',
                $schemaName,
            ));
        }

        $this->namedSchemaConfiguration[$schemaName] = [
            'className' => $className,
            'groupHash' => $groupHash,
            'groups' => $this->groupsMap[$groupHash],
        ];
        $this->uniqueClassNames[$className] = true;
        $this->existingSchemas[$schemaName] = self::REF_PREFIX.$schemaName;

        return self::REF_PREFIX.$schemaName;
    }

    /**
     * @return list<array{className: class-string, groups: string[]|null, schemaName: string}>
     */
    public function getSchemaComponents(): array
    {
        $schemaComponents = [];

        foreach ($this->schemaNamesByClassNameAndGroup as $className => $groupReference) {
            foreach ($groupReference as $groupHash => $schemaName) {
                $schemaComponents[] = [
                    'className' => $className,
                    'groups' => $this->groupsMap[$groupHash],
                    'schemaName' => $schemaName,
                ];
            }
        }

        foreach ($this->namedSchemaConfiguration as $schemaName => $configuration) {
            $schemaComponents[] = [
                'className' => $configuration['className'],
                'groups' => $configuration['groups'],
                'schemaName' => $schemaName,
            ];
        }

        return $schemaComponents;
    }

    /**
     * Useful for debugging and also determine the classes to watch for changes when caching.
     *
     * @return array<class-string>
     */
    public function getUniqueClassNames(): array
    {
        return array_keys($this->uniqueClassNames);
    }

    /**
     * @param array<string>|null $groups
     */
    private function groupHash(?array $groups): string
    {
        if (null === $groups) {
            return self::NO_GROUP_DEFINED;
        }

        sort($groups);
        $groupHash = 'hash-'.crc32(implode(',', $groups));
        $this->groupsMap[$groupHash] = $groups;

        return $groupHash;
    }
}
